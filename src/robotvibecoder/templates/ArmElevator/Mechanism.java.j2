package frc.robot.{{ package }};

import static edu.wpi.first.units.Units.RadiansPerSecond;
import static edu.wpi.first.units.Units.RotationsPerSecond;
import static edu.wpi.first.units.Units.MetersPerSecond;
import static edu.wpi.first.units.Units.{{ kind|pos_unit }};
import static edu.wpi.first.units.Units.Rotations;
import static edu.wpi.first.units.Units.Volts;
import static edu.wpi.first.units.Units.VoltsPerRadianPerSecond;
import static edu.wpi.first.units.Units.VoltsPerRadianPerSecondSquared;

import coppercore.parameter_tools.LoggedTunableNumber;
import coppercore.wpilib_interface.UnitUtils;
import edu.wpi.first.units.measure.{{ kind|pos_dimension }};
import edu.wpi.first.units.measure.Mut{{ kind|pos_dimension }};
{%- if kind == "Elevator" %}
import edu.wpi.first.units.measure.Angle;
{%- endif %}
import edu.wpi.first.units.measure.{{ kind|vel_dimension }};
import frc.robot.{{ package }}.{{ name }}IO.{{ name }}OutputMode;
import org.littletonrobotics.junction.Logger;

/**
 * A Mechanism to manage the {{ name }}
 *
 * <ul>
 *   <li>Uses closed-loop TorqueCurrentFOC control
 */
public class {{ name }}Mechanism {
  {{ name }}IO io;
  {{ name }}InputsAutoLogged inputs = new {{ name }}InputsAutoLogged();
  {{ name }}OutputsAutoLogged outputs = new {{ name }}OutputsAutoLogged();

  Mut{{ kind|goal_dimension }} goal{{ kind|goal }} = {{ kind|pos_unit }}.mutable(0.0);
  Mut{{ kind|pos_dimension }} clampedGoal{{ kind|goal }} = {{ kind|pos_unit }}.mutable(0.0);

  Mut{{ kind|pos_dimension }} min{{ kind|goal }} = {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MinMin{{ kind|goal }}.mutableCopy();
  Mut{{ kind|pos_dimension }} max{{ kind|goal }} = {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MaxMax{{ kind|goal }}.mutableCopy();

  LoggedTunableNumber {{ name|lowerfirst }}kP;
  LoggedTunableNumber {{ name|lowerfirst }}kI;
  LoggedTunableNumber {{ name|lowerfirst }}kD;

  LoggedTunableNumber {{ name|lowerfirst }}kS;
  LoggedTunableNumber {{ name|lowerfirst }}kV;
  LoggedTunableNumber {{ name|lowerfirst }}kA;
  LoggedTunableNumber {{ name|lowerfirst }}kG;

  LoggedTunableNumber {{ name|lowerfirst }}CruiseVelocity;
  LoggedTunableNumber {{ name|lowerfirst }}ExpokV;
  LoggedTunableNumber {{ name|lowerfirst }}ExpokA;

  LoggedTunableNumber {{ name|lowerfirst }}TuningSetpointRotations;
  LoggedTunableNumber {{ name|lowerfirst }}TuningOverrideVolts;

  public {{ name }}Mechanism({{ name }}IO io) {
    {{ name|lowerfirst }}kP =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kP", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KP);
    {{ name|lowerfirst }}kI =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kI", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KI);
    {{ name|lowerfirst }}kD =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kD", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KD);

    {{ name|lowerfirst }}kS =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kS", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KS);
    {{ name|lowerfirst }}kV =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kV", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KV);
    {{ name|lowerfirst }}kA =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kA", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KA);
    {{ name|lowerfirst }}kG =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}kG", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}KG);

    {{ name|lowerfirst }}CruiseVelocity =
        new LoggedTunableNumber(
            "{{ name }}Tunables/{{ name|lowerfirst }}CruiseVelocity",
            {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}AngularCruiseVelocityRotationsPerSecond);
    {{ name|lowerfirst }}ExpokV =
        new LoggedTunableNumber(
            "{{ name }}Tunables/{{ name|lowerfirst }}ExpokV", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MotionMagicExpo_kV);
    {{ name|lowerfirst }}ExpokA =
        new LoggedTunableNumber(
            "{{ name }}Tunables/{{ name|lowerfirst }}ExpokA", {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MotionMagicExpo_kA);

    {{ name|lowerfirst }}TuningSetpointRotations =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}TuningSetpointRotations", 0.0);
    {{ name|lowerfirst }}TuningOverrideVolts =
        new LoggedTunableNumber("{{ name }}Tunables/{{ name|lowerfirst }}TuningOverrideVolts", 0.0);

    this.io = io;
  }

  /**
   * Runs periodically when the robot is enabled
   *
   * <p>Does NOT run automatically! Must be called by the subsystem
   */
  public void periodic() {
    sendGoal{{ kind|goal }}ToIO();

    io.updateInputs(inputs);
    io.applyOutputs(outputs);

    Logger.processInputs("{{ name }}/inputs", inputs);
    Logger.processInputs("{{ name }}/outputs", outputs);
  }

  public void setBrakeMode(boolean brake) {
    io.setBrakeMode(brake);
  }

  /** This method must be called from the subsystem's test periodic! */
  public void testPeriodic() {
    if (false) { // TODO: Replace placeholder test if {{ name }}Tuning mode is active
      // switch (TestModeManager.getTestMode()) {
      // case {{ name }}ClosedLoopTuning:
        io.setOutputMode({{ name }}OutputMode.ClosedLoop);
        LoggedTunableNumber.ifChanged(
            hashCode(),
            (pid) -> {
              io.setPID(pid[0], pid[1], pid[2]);
            },
            {{ name|lowerfirst }}kP,
            {{ name|lowerfirst }}kI,
            {{ name|lowerfirst }}kD);

        LoggedTunableNumber.ifChanged(
            hashCode(),
            (ff) -> {
              io.setFF(ff[0], ff[1], ff[2], ff[3]);
            },
            {{ name|lowerfirst }}kS,
            {{ name|lowerfirst }}kV,
            {{ name|lowerfirst }}kA,
            {{ name|lowerfirst }}kG);

        LoggedTunableNumber.ifChanged(
            hashCode(),
            (maxProfile) -> {
              io.setMaxProfile(
                  RadiansPerSecond.of(0.0),
                  VoltsPerRadianPerSecondSquared.ofNative(maxProfile[0]),
                  VoltsPerRadianPerSecond.ofNative(maxProfile[1]));
            },
            {{ name|lowerfirst }}ExpokA,
            {{ name|lowerfirst }}ExpokV);

        LoggedTunableNumber.ifChanged(
            hashCode(),
            (setpoint) -> {
              setGoal{{ kind|goal }}({{ kind|pos_unit }}.of(setpoint[0]));
            },
            {{ name|lowerfirst }}TuningSetpointRotations);
      /*  case {{ name }}VoltageTuning:
          LoggedTunableNumber.ifChanged(
            hashCode(),
            (setpoint) -> {
              io.setOverrideVoltage(Volts.of(setpoint[0]));
            },
            {{ name|lowerfirst }}TuningOverrideVolts);
          io.setOverrideMode(true);
          break;
        }
        */
    }
  }

  public void sendGoal{{ kind|goal }}ToIO() {
{%- if kind != "Flywheel" %}
    updateClampedGoal{{ kind|goal }}();

{%- if kind == "Arm" %}
    io.set{{ encoder|upperfirst }}GoalPos(clampedGoal{{ kind|goal }});
{%- elif kind == "Elevator" %}
    // Convert goal height to encoder rotations
    Angle {{ encoder }}GoalAngle = {{ name|lowerfirst }}HeightTo{{ encoder|upperfirst }}Angle(clampedGoal{{ kind|goal }});

    io.set{{ encoder|upperfirst }}GoalPos({{ encoder }}GoalAngle);
{%- endif %}
{%- else %}
    io.set{{ encoder|upperfirst }}GoalSpeed(goal{{ kind|goal }});
{%- endif %}
  }

  /**
   * Based on the bounds previously set, clamp the last set goal {{ kind|goal|lowerfirst }} to be between the bounds.
   *
   * <p>If the goal height is outside of the bounds and the bounds are expanded, this function will
   * still behave as expected, as the mechanism remembers its unclamped goal height and will attempt
   * to get there once it is allowed.
   */
  private void updateClampedGoal{{ kind|goal }}() {
    clampedGoal{{ kind|goal }}.mut_replace(UnitUtils.clampMeasure(goal{{ kind|goal }}, min{{ kind|goal }}, max{{ kind|goal }}));

    Logger.recordOutput("{{ name }}/clampedGoal{{ kind|goal }}", clampedGoal{{ kind|goal }});
  }

  /**
   * Set the goal {{ kind|goal|lowerfirst }} the {{ name|lowerfirst }} will to control to.
   *
   * <p>This goal {{ kind|goal|lowerfirst }} will be clamped by the allowed range of motion
   *
   * @param goal{{ kind|pos_dimension }} The new goal angle
   */
  public void setGoal{{ kind|goal }}({{ kind|goal_dimension }} goal{{ kind|goal }}) {
    this.goal{{ kind|goal }}.mut_replace(goal{{ kind|goal }});

    Logger.recordOutput("{{ name }}/goal{{ kind|goal }}", goal{{ kind|goal }});
  }

  /**
   * Sets the minimum and maximum allowed {{ kind|goal|lowerfirst }}s that the {{ name|lowerfirst }} may target.
   *
   * <p>When not in override mode, the goal {{ kind|goal|lowerfirst }} of the {{ name|lowerfirst }} will be clamped to be between these
   * values before it is sent to the IO. When these clamps change, the original goal {{ kind|goal|lowerfirst }} is
   * clamped to be within the new bounds.
   *
   * @param min{{ kind|goal }} The minimum angle, which will be clamped between {{ name|lowerfirst }}MinMin{{ kind|pos_dimension }} and
   *     {{ name|lowerfirst }}MaxMax{{ kind|pos_dimension }} before being applied
   * @param max{{ kind|goal }} The maximum angle, which will be clamped between {{ name|lowerfirst }}MinMin{{ kind|pos_dimension }} and
   *     {{ name|lowerfirst }}MaxMax{{ kind|pos_dimension }} before being applied
   */
  public void setAllowedRangeOfMotion({{ kind|pos_dimension }} min{{ kind|goal }}, {{ kind|pos_dimension }} max{{ kind|goal }}) {
    setMin{{ kind|goal }}(min{{ kind|goal }});
    setMax{{ kind|goal }}(max{{ kind|goal }});
  }

  /**
   * Sets the minimum allowed angle that the {{ name|lowerfirst }} may target.
   *
   * <p>When not in override mode, the goal {{ kind|goal|lowerfirst }} of the {{ name|lowerfirst }} will be clamped to be between these
   * values before it is sent to the IO. When these clamps change, the original goal {{ kind|goal|lowerfirst }} is
   * clamped to be within the new bounds.
   *
   * @param min{{ kind|goal }} The minimum angle, which will be clamped between {{ name|lowerfirst }}MinMin{{ kind|goal }} and
   *     {{ name|lowerfirst }}MaxMax{{ kind|goal }} before being applied
   */
  public void setMin{{ kind|goal }}({{ kind|pos_dimension }} min{{ kind|goal }}) {
    this.min{{ kind|goal }}.mut_replace(
        UnitUtils.clampMeasure(
            min{{ kind|goal }},
            {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MinMin{{ kind|goal }},
            {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MaxMax{{ kind|goal }}));

    Logger.recordOutput("{{ name }}/min{{ kind|goal }}", min{{ kind|goal }});
  }

  /**
   * Sets the maximum allowed angle that the {{ name|lowerfirst }} may target.
   *
   * <p>When not in override mode, the goal {{ kind|goal|lowerfirst }} of the {{ name|lowerfirst }} will be clamped to be between these
   * values before it is sent to the IO. When these clamps change, the original goal angle is
   * clamped to be within the new bounds.
   *
   * @param max{{ kind|goal }} The maximum angle, which will be clamped between {{ name|lowerfirst }}MinMin{{ kind|goal }} and
   *     {{ name|lowerfirst }}MaxMax{{ kind|goal }} before being applied
   */
  public void setMax{{ kind|goal }}({{ kind|pos_dimension }} max{{ kind|goal }}) {
    this.max{{ kind|goal }}.mut_replace(
        UnitUtils.clampMeasure(
            max{{ kind|goal }},
            {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MaxMax{{ kind|goal }},
            {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}MaxMax{{ kind|goal }}));

    Logger.recordOutput("{{ name }}/max{{ kind|goal }}", max{{ kind|goal }});
  }

  /**
   * Get the current {{ kind|goal|lowerfirst }} of the {{ name|lowerfirst }}
   *
   * @return
   */
  public {{ kind|pos_dimension }} get{{ name }}{{ kind|goal }}() {
{%- if kind == "Arm" %}
    return inputs.{{ encoder }}Pos;
{%- elif kind == "Elevator" %}
    return {{ encoder }}AngleTo{{ name }}Height(inputs.{{ encoder }}Pos);
{%- endif%}
  }

  /**
   * Get the current velocity of the {{ name|lowerfirst }}
   *
   * @return The current velocity of the {{ name|lowerfirst }}, according to the {{ encoder }}
   */
  public {{ kind|vel_dimension }} get{{ name }}Velocity() {
{%- if kind != "Elevator" %}
    return inputs.{{ encoder }}Vel;
{%- else %}
  return MetersPerSecond.of(
    inputs.{{ encoder }}Vel.in(RotationsPerSecond) * {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}HeightPer{{ encoder|upperfirst }}RotationMeters);
{%- endif%}
  }

  /**
   * Check whether or not the {{ encoder }} is currently connected.
   *
   * <p>"Connected" means that last time the position and velocity status signals were refreshed, the status code
   * was OK
   *
   * @return True if connected, false if disconnected
   */
  public boolean is{{ encoder|upperfirst }}Connected() {
    return inputs.{{ encoder }}Connected;
  }

  /**
   * Get a reference to the {{ name|lowerfirst }}'s IO. This should be used to update PID, motion profile, and feed
   * forward gains, and to set brake mode/disable motors. This method exists to avoid the need to
   * duplicate all of these functions between the mechanism and the IO.
   *
   * @return the {{ name|lowerfirst }} mechanism's IO
   */
  public {{ name }}IO getIO() {
    return io;
  }

  /** Set whether or not the motor on the {{ name|lowerfirst }} should be disabled */
  public void setMotorsDisabled(boolean disabled) {
    io.setMotorsDisabled(disabled);
  }

  /** Get the current{%if kind != "Flywheel"%} unclamped{% endif %} goal {{ kind|goal|lowerfirst }} of the {{ name|lowerfirst }} */
  public {{ kind|goal_dimension }} getGoal{{ kind|goal }}() {
    return goal{{ kind|goal }};
  }
{%- if kind == "Elevator" %}

  /**
   * Convert an angle of the {{ encoder }} into {{ name }} height
   *
   * @param {{ encoder }}Angle The encoder angle to convert
   * @return How much the {{ name }} would move if the {{ encoder }} were rotated by {{ encoder }}Angle
   */
  public Distance {{ encoder }}AngleTo{{ name }}Height(Angle {{ encoder }}Angle) {
    return Meters.of({{ encoder }}Angle.in(Rotations) * {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}HeightPer{{ encoder|upperfirst }}RotationMeters);
  }

  /**
   * Convert {{ name }} height into {{ encoder }} angle
   *
   * @param {{ name }}Height The distance of the {{ name }} to convert
   * @return How much the {{ encoder }} would rotate if the {{ name }} were moved by {{ name }}Height
   */
   public Angle {{ name|lowerfirst }}HeightTo{{ encoder|upperfirst }}Angle(Distance {{ name|lowerfirst }}Height) {
    return Rotations.of({{ name|lowerfirst }}Height.in(Meters) / {{ name }}Constants.synced.getObject().{{ name|lowerfirst }}HeightPer{{ encoder|upperfirst }}RotationMeters);
   }
{%- endif%}
}