package frc.robot.{{ package }}; // NOTE: This should be changed if you keep your constants in a separate package from your code

import static edu.wpi.first.units.Units.Amps;
{%- if kind == "Arm" %}
import static edu.wpi.first.units.Units.KilogramSquareMeters;
{%- endif %}
{%- if kind == "Elevator" %}
import static edu.wpi.first.units.Units.Kilograms;
{%- endif %}
import static edu.wpi.first.units.Units.Meters;
import static edu.wpi.first.units.Units.Radians;
{%- if kind != "Flywheel" and kind|pos_unit != "Meters" %}
import static edu.wpi.first.units.Units.{{ kind|pos_unit }};
{%- endif %}

import com.ctre.phoenix6.signals.SensorDirectionValue;
import coppercore.parameter_tools.json.JSONExclude;
import coppercore.parameter_tools.json.JSONSync;
import coppercore.parameter_tools.json.JSONSyncConfigBuilder;
import coppercore.parameter_tools.path_provider.EnvironmentHandler;
import edu.wpi.first.units.measure.Angle;
import edu.wpi.first.units.measure.Current;
import edu.wpi.first.units.measure.Distance;
{%- if kind == "Elevator" %}
import edu.wpi.first.units.measure.Mass;
{%- endif %}
{%- if kind == "Arm" %}
import edu.wpi.first.units.measure.MomentOfInertia;
{%- endif %}
import edu.wpi.first.wpilibj.Filesystem;


public final class {{ name }}Constants {
  @JSONExclude
  public static final JSONSync<{{ name }}Constants> synced =
      new JSONSync<{{ name }}Constants>(
          new {{ name }}Constants(),
          "{{ name }}Constants.json",
          EnvironmentHandler.getEnvironmentHandler().getEnvironmentPathProvider(),
          new JSONSyncConfigBuilder().setPrettyPrinting(true).build());
{% for motor in motors %}
  public final Integer {{ motor }}Id = {{ motor|hash_can_id }}; // TODO: Replace placeholder CAN ID
  {%- endfor %}

    {%- for motor in motors%}
    {%- if motor != lead_motor%}
  public final Boolean invert{{ motor|upperfirst }}FollowerRequest = false;
    {%- endif %}
    {%- endfor %}

  /**
   * What point in the sensor's range the discontinuity occurs. Results in a range of [1-x, x). For
   * example, a value of 1 gives a range of [0.0, 1).
   */
  public final Double {{ encoder }}DiscontinuityPoint = 1.0;

  public final Angle {{ encoder }}MagnetOffset = Radians.of(0.0);

  public final Integer {{ encoder }}ID = {{ encoder|hash_can_id }}; // TODO: Replace placeholder CAN ID

  public final SensorDirectionValue {{ encoder }}Direction =
      SensorDirectionValue.Clockwise_Positive;

  /*
   * The {{ encoder }} is represented as the mechanism in our Phoenix configs.
   * This means that we are controlling to a goal in terms of large CANCoder angle.
   */
  @JSONExclude public final double {{ encoder }}ToMechanismRatio = 1.0;

  @JSONExclude
  public final double rotorTo{{ encoder|upperfirst }}Ratio = 1.0; // TODO: Replace placeholder value

  public final Double {{ name|lowerfirst }}KP = 0.0;
  public final Double {{ name|lowerfirst }}KI = 0.0;
  public final Double {{ name|lowerfirst }}KD = 0.0;

  public final Double {{ name|lowerfirst }}KS = 0.0;
  public final Double {{ name|lowerfirst }}KV = 0.0;
  public final Double {{ name|lowerfirst }}KA = 0.0;
  public final Double {{ name|lowerfirst }}KG = 0.0;

  /** This is a Double until coppercore JSONSync supports RotationsPerSecond */
  public final Double {{ name|lowerfirst }}AngularCruiseVelocityRotationsPerSecond = 1.0;

  /*
   * The Motion Magic Expo kV, measured in Volts per Radian per Second, but represented as a double so it can be synced by JSONSync
   *
   * <p> This kV is used by Motion Magic Expo to generate a motion profile. Dividing the supply voltage by
   * kV results in the maximum velocity of the system. Therefore, a higher profile kV results in a
   * lower profile velocity.
  */
  public final Double {{ name|lowerfirst }}MotionMagicExpo_kV = 0.0;

  /*
   * The Motion Magic Expo kA, measured in Volts per Radian per Second Squared, but represented as a double so it can be synced by JSONSync
  */
  public final Double {{ name|lowerfirst }}MotionMagicExpo_kA = 0.0;

  public final Current {{ name|lowerfirst }}StatorCurrentLimit = Amps.of(80.0); // TODO: Replace placeholder current limit

  public final Double {{ name|lowerfirst }}Reduction = 1.0; // TODO: Replace placeholder reduction
{% if kind == "Elevator" %}
  public final Double {{ name|lowerfirst }}HeightPer{{ encoder|upperfirst }}RotationMeters = 0.1;
{%- endif %}
{%- if kind != "Flywheel" %}
  public final {{ kind|pos_dimension }} {{ name|lowerfirst }}MinMin{{ kind|goal }} = {{ kind|pos_unit }}.of(0.0); // TODO: Replace placeholder constraints
  public final {{ kind|pos_dimension }} {{ name|lowerfirst }}MaxMax{{ kind|goal }} = {{ kind|pos_unit }}.of(1.0);

{%- endif %}
  public static final class Sim {
    @JSONExclude
    public static final JSONSync<{{ name }}Constants.Sim> synced =
        new JSONSync<{{ name }}Constants.Sim>(
            new {{ name }}Constants.Sim(),
            Filesystem.getDeployDirectory()
                .toPath()
                .resolve("constants/{{ name }}Constants.Sim.json")
                .toString(),
            new JSONSyncConfigBuilder().build());

    /** Standard deviation passed to sim for the position measurement */
    public final Double positionStdDev = 0.0;

    /** Standard deviation passed to sim for the velocity measurement */
    public final Double velocityStdDev = 0.0;
{% if kind == "Arm" %}
    @JSONExclude
    public final MomentOfInertia {{ name|lowerfirst }}MomentOfInertia = KilogramSquareMeters.of(0.05); // TODO: Replace placeholder moment of inertia
    public final Distance {{ name|lowerfirst }}ArmLength = Meters.of(1.0); // TODO: Replace placeholder arm length
    public final Angle {{ name|lowerfirst }}MinAngle = Radians.of(0.0); // TODO: Update placeholder min & max angles
    public final Angle {{ name|lowerfirst }}MaxAngle = Radians.of(1.0);

    public final Angle {{ name|lowerfirst }}StartingAngle = Radians.of(0.0);
{%- elif kind == "Elevator" %}
    public final Mass carriageMass = Kilograms.of(5.0);
    public final Distance drumRadius = Meters.of(0.05);
    public final Distance {{ name|lowerfirst }}StartingHeight = Meters.of(0.0);
{%- endif %}
  }
}